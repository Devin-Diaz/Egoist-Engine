7/4/2024
---------------------------------------------------------------------------------------------------------------------------------------

OVERVIEW:

Getting setup with project. We will use React, Spring Boot, PostgreSQL, and Python to complete this project.
The goal of Blue Lock Index is to show the teams and players of each arc. We will be doing the following arcs:
	- First Selection
	- Second Selection
	- World 5
	- Third Selection
	- U20 Match
	- Neo Egoist League

To begin building this application we of course need... DATA! Unfortnuately I couldn't find an API to make this
process easy so we will result to web scraping utilizing Python. The following is the link to where I will be 
getting my data. 

LINK: https://bluelock.fandom.com/wiki/List_of_Characters

Schema will be designed as the following:
	
	PLAYER:
		- Player Id (PRIM KEY)
		- Full name
		- Age
		- Height
		- Nationality
		- Image url

	ARC:
 		- Arc Id (PRIM KEY)
		- Arc name
	
	TEAM:
		- Team Id (PRIM KEY)
		- Arc Id (FOREIGN KEY)
		- Team name

	PLAYER STATS:
		- Stat Id (PRIM KEY)
		- Player Id (FOREIGN KEY)
		- Arc Id (FOREIGN KEY)
		- Team Id (FOREIGN KEY)
		- Position(s)
		- Weapons
		- Jersey no

Only slight question raised will be the second selection since there is to many teams due to the mini games in 
that arc. So there will be a lot of NULL values as no teams will be specified only PLAYER, ARC, STATS, would
be specified.

---------------------------------------------------------------------------------------------------------------------------------------

WEB DATA SCRAPING:

We will be utilizing the BeautifulSoup library from python to be scraping data via the html/xml of the page. This is where
the first complication comes in. 

	Our data has profiles for each of the character for each arc. So before collecting actual
	player data, we must scrape all references that point to the page of their actual profile. 
	We will make a function that collects all hrefs for each player component.

	Once we have all the hrefs for each player, we will iterate through each and parse out data needed.
	Once data is parsed and stored in proper data structure we will convert it into csv file as we will
	need these files to transfer data to a dbms seamlessly is that even a word bruh.

	Arc and Team data will be manually written as there is not that many entries. These will also be converted
	to csv files. Recall we use pandas library to do this action. 

	Lastly we need the player arc data. I will import my manually written data to assist with this ensuring I pair
	the foreign key data correctly. For player data I'll read my csv file. This will be a little tricky as a lot
	of players have played on multiple teams and been in more than one arcs. Additionally I need to figure out the
	player weapon aspect. For example Isagi didn't get metavision until he was on Bastard Munchen. I feel like
	that can be manually adjusted, but we shall see. 

---------------------------------------------------------------------------------------------------------------------------------------

7/5/2024

SCRAPING PLAYER STATS:

	We now have 3/4 csv files we need before moving on to database portion. However this table might be tricky due 
	to the amount of data we have and how we have to be precise with foreign keys. Let's figure out how we will 
	take care of fields we need for this.
		- Stat id, the easiest one we will have a global counter each time we create a new entry

		- Player id FOREIGN KEY. For this we have the csv file we can read. What I'm currently thinking is
		  we will iterate through player page again in new script, we will check for the name, same way we did
		  when we were getting general player data, we check where that player is located in the csv file, we get
		  it's tuple. Then since we are on the tuple for the specific player name, we will get the value at it's
		  column index since we created the datasets we can hardcode the index we want. No player can be None since
		  all 137 players exist in my csv file. 

		- For Arc id it'll take a couple tasks. we'd have to iterate through players Team and Former Team(s). None of the
		players can be None since at one point characters existed in a arc. Again since we manaully wrote this data,
		we will check for the value of arc name to check it with team names since they are spelled the same, then get
		the key value for that arc_id in that same dictionary. 

		- Actually my life might be easier to do arc id and team id in one since I manually wrote that data. team id and
		arc id are already together properly. I will just iterate through former team and team, get the name of the team,
		then associate my id's based off that in the tuple since I know where they will be located. 
	








